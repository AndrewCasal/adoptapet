{"ast":null,"code":"import { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\n\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\n\nvar RESTMethods;\n\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\n\nconst restContext = {\n  set,\n  status,\n  cookie,\n  body,\n  text,\n  json,\n  xml,\n  delay,\n  fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\n\nclass RestHandler extends RequestHandler {\n  constructor(method, mask, resolver) {\n    super({\n      info: {\n        header: `${method} ${mask}`,\n        mask,\n        method\n      },\n      ctx: restContext,\n      resolver\n    });\n    this.checkRedundantQueryParameters();\n  }\n\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      mask\n    } = this.info;\n    const resolvedMask = getUrlByMask(mask);\n\n    if (resolvedMask instanceof URL && resolvedMask.search !== '') {\n      const queryParams = [];\n      resolvedMask.searchParams.forEach((_, paramName) => {\n        queryParams.push(paramName);\n      });\n      console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams.map(paramName => `\\\n  const ${paramName} = query.get(\"${paramName}\")`).join('\\n')}\n})\\\n      `);\n    }\n  }\n\n  parse(request) {\n    return matchRequestUrl(request.url, this.info.mask);\n  }\n\n  getPublicRequest(request, parsedResult) {\n    return Object.assign(Object.assign({}, request), {\n      params: parsedResult.params || {}\n    });\n  }\n\n  predicate(request, parsedResult) {\n    return isStringEqual(this.info.method, request.method) && parsedResult.matches;\n  }\n\n  log(request, response) {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response);\n    console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, `color:${getStatusCodeColor(response.status)}`, response.status, 'color:inherit');\n    console.log('Request', loggedRequest);\n    console.log('Handler:', {\n      mask: this.info.mask,\n      resolver: this.resolver\n    });\n    console.log('Response', loggedResponse);\n    console.groupEnd();\n  }\n\n}\n\nfunction createRestHandler(method) {\n  return (mask, resolver) => {\n    return new RestHandler(method, mask, resolver);\n  };\n}\n\nconst rest = {\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"names":["R","RequestHandler","e","getUrlByMask","m","matchRequestUrl","g","getPublicUrlFromRequest","f","prepareRequest","h","prepareResponse","i","getTimestamp","j","getStatusCodeColor","b","set","s","status","json","d","delay","fetch","c","cookie","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","constructor","method","mask","resolver","info","header","ctx","checkRedundantQueryParameters","resolvedMask","URL","search","queryParams","searchParams","forEach","_","paramName","push","console","warn","pathname","map","join","parse","request","url","getPublicRequest","parsedResult","Object","assign","params","predicate","matches","log","response","publicUrl","loggedRequest","loggedResponse","groupCollapsed","groupEnd","createRestHandler","rest","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"sources":["C:/Users/andre/Desktop/Programming/projects/adoptapet/adopt-a-pet-starter/node_modules/msw/lib/esm/rest-deps.js"],"sourcesContent":["import { R as RequestHandler, e as getUrlByMask, m as matchRequestUrl, g as getPublicUrlFromRequest, f as prepareRequest, h as prepareResponse, i as getTimestamp, j as getStatusCodeColor } from './RequestHandler-deps.js';\nimport { b as set, s as status, e as json, d as delay, f as fetch } from './fetch-deps.js';\nimport { c as cookie, b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, mask, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${mask}`,\r\n                mask,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, mask } = this.info;\r\n        const resolvedMask = getUrlByMask(mask);\r\n        if (resolvedMask instanceof URL && resolvedMask.search !== '') {\r\n            const queryParams = [];\r\n            resolvedMask.searchParams.forEach((_, paramName) => {\r\n                queryParams.push(paramName);\r\n            });\r\n            console.warn(`\\\n[MSW] Found a redundant usage of query parameters in the request handler URL for \"${method} ${mask}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${resolvedMask.pathname}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams\r\n                .map((paramName) => `\\\n  const ${paramName} = query.get(\"${paramName}\")`)\r\n                .join('\\n')}\n})\\\n      `);\r\n        }\r\n    }\r\n    parse(request) {\r\n        return matchRequestUrl(request.url, this.info.mask);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        return (isStringEqual(this.info.method, request.method) && parsedResult.matches);\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        console.groupCollapsed('[MSW] %s %s %s (%c%s%c)', getTimestamp(), request.method, publicUrl, `color:${getStatusCodeColor(response.status)}`, response.status, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.mask,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (mask, resolver) => {\r\n        return new RestHandler(method, mask, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,cAAd,EAA8BC,CAAC,IAAIC,YAAnC,EAAiDC,CAAC,IAAIC,eAAtD,EAAuEC,CAAC,IAAIC,uBAA5E,EAAqGC,CAAC,IAAIC,cAA1G,EAA0HC,CAAC,IAAIC,eAA/H,EAAgJC,CAAC,IAAIC,YAArJ,EAAmKC,CAAC,IAAIC,kBAAxK,QAAkM,0BAAlM;AACA,SAASC,CAAC,IAAIC,GAAd,EAAmBC,CAAC,IAAIC,MAAxB,EAAgCjB,CAAC,IAAIkB,IAArC,EAA2CC,CAAC,IAAIC,KAAhD,EAAuDd,CAAC,IAAIe,KAA5D,QAAyE,iBAAzE;AACA,SAASC,CAAC,IAAIC,MAAd,EAAsBT,CAAC,IAAIU,IAA3B,EAAiCC,CAAC,IAAIC,IAAtC,EAA4CC,CAAC,IAAIC,GAAjD,QAA4D,eAA5D;AAEA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyC;EACrC,OAAOD,MAAM,CAACE,WAAP,OAAyBD,QAAQ,CAACC,WAAT,EAAhC;AACH;;AAED,IAAIC,WAAJ;;AACA,CAAC,UAAUA,WAAV,EAAuB;EACpBA,WAAW,CAAC,MAAD,CAAX,GAAsB,MAAtB;EACAA,WAAW,CAAC,KAAD,CAAX,GAAqB,KAArB;EACAA,WAAW,CAAC,MAAD,CAAX,GAAsB,MAAtB;EACAA,WAAW,CAAC,KAAD,CAAX,GAAqB,KAArB;EACAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;EACAA,WAAW,CAAC,SAAD,CAAX,GAAyB,SAAzB;EACAA,WAAW,CAAC,QAAD,CAAX,GAAwB,QAAxB;AACH,CARD,EAQGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CARd;;AASA,MAAMC,WAAW,GAAG;EAChBnB,GADgB;EAEhBE,MAFgB;EAGhBM,MAHgB;EAIhBC,IAJgB;EAKhBE,IALgB;EAMhBR,IANgB;EAOhBU,GAPgB;EAQhBR,KARgB;EAShBC;AATgB,CAApB;AAWA;AACA;AACA;AACA;;AACA,MAAMc,WAAN,SAA0BpC,cAA1B,CAAyC;EACrCqC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyB;IAChC,MAAM;MACFC,IAAI,EAAE;QACFC,MAAM,EAAG,GAAEJ,MAAO,IAAGC,IAAK,EADxB;QAEFA,IAFE;QAGFD;MAHE,CADJ;MAMFK,GAAG,EAAER,WANH;MAOFK;IAPE,CAAN;IASA,KAAKI,6BAAL;EACH;;EACDA,6BAA6B,GAAG;IAC5B,MAAM;MAAEN,MAAF;MAAUC;IAAV,IAAmB,KAAKE,IAA9B;IACA,MAAMI,YAAY,GAAG3C,YAAY,CAACqC,IAAD,CAAjC;;IACA,IAAIM,YAAY,YAAYC,GAAxB,IAA+BD,YAAY,CAACE,MAAb,KAAwB,EAA3D,EAA+D;MAC3D,MAAMC,WAAW,GAAG,EAApB;MACAH,YAAY,CAACI,YAAb,CAA0BC,OAA1B,CAAkC,CAACC,CAAD,EAAIC,SAAJ,KAAkB;QAChDJ,WAAW,CAACK,IAAZ,CAAiBD,SAAjB;MACH,CAFD;MAGAE,OAAO,CAACC,IAAR,CAAc;AAC1B,oFAAoFjB,MAAO,IAAGC,IAAK;AACnG;AACA,OAAOD,MAAM,CAACL,WAAP,EAAqB,KAAIY,YAAY,CAACW,QAAS;AACtD;AACA,EAAER,WAAW,CACIS,GADf,CACoBL,SAAD,IAAgB;AACrC,UAAUA,SAAU,iBAAgBA,SAAU,IAF5C,EAGeM,IAHf,CAGoB,IAHpB,CAG0B;AAC5B;AACA,OAVY;IAWH;EACJ;;EACDC,KAAK,CAACC,OAAD,EAAU;IACX,OAAOxD,eAAe,CAACwD,OAAO,CAACC,GAAT,EAAc,KAAKpB,IAAL,CAAUF,IAAxB,CAAtB;EACH;;EACDuB,gBAAgB,CAACF,OAAD,EAAUG,YAAV,EAAwB;IACpC,OAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,CAAd,EAA0C;MAAEM,MAAM,EAAEH,YAAY,CAACG,MAAb,IAAuB;IAAjC,CAA1C,CAAP;EACH;;EACDC,SAAS,CAACP,OAAD,EAAUG,YAAV,EAAwB;IAC7B,OAAQjC,aAAa,CAAC,KAAKW,IAAL,CAAUH,MAAX,EAAmBsB,OAAO,CAACtB,MAA3B,CAAb,IAAmDyB,YAAY,CAACK,OAAxE;EACH;;EACDC,GAAG,CAACT,OAAD,EAAUU,QAAV,EAAoB;IACnB,MAAMC,SAAS,GAAGjE,uBAAuB,CAACsD,OAAD,CAAzC;IACA,MAAMY,aAAa,GAAGhE,cAAc,CAACoD,OAAD,CAApC;IACA,MAAMa,cAAc,GAAG/D,eAAe,CAAC4D,QAAD,CAAtC;IACAhB,OAAO,CAACoB,cAAR,CAAuB,yBAAvB,EAAkD9D,YAAY,EAA9D,EAAkEgD,OAAO,CAACtB,MAA1E,EAAkFiC,SAAlF,EAA8F,SAAQzD,kBAAkB,CAACwD,QAAQ,CAACpD,MAAV,CAAkB,EAA1I,EAA6IoD,QAAQ,CAACpD,MAAtJ,EAA8J,eAA9J;IACAoC,OAAO,CAACe,GAAR,CAAY,SAAZ,EAAuBG,aAAvB;IACAlB,OAAO,CAACe,GAAR,CAAY,UAAZ,EAAwB;MACpB9B,IAAI,EAAE,KAAKE,IAAL,CAAUF,IADI;MAEpBC,QAAQ,EAAE,KAAKA;IAFK,CAAxB;IAIAc,OAAO,CAACe,GAAR,CAAY,UAAZ,EAAwBI,cAAxB;IACAnB,OAAO,CAACqB,QAAR;EACH;;AAvDoC;;AA0DzC,SAASC,iBAAT,CAA2BtC,MAA3B,EAAmC;EAC/B,OAAO,CAACC,IAAD,EAAOC,QAAP,KAAoB;IACvB,OAAO,IAAIJ,WAAJ,CAAgBE,MAAhB,EAAwBC,IAAxB,EAA8BC,QAA9B,CAAP;EACH,CAFD;AAGH;;AACD,MAAMqC,IAAI,GAAG;EACTC,IAAI,EAAEF,iBAAiB,CAAC1C,WAAW,CAAC6C,IAAb,CADd;EAETC,GAAG,EAAEJ,iBAAiB,CAAC1C,WAAW,CAAC+C,GAAb,CAFb;EAGTC,IAAI,EAAEN,iBAAiB,CAAC1C,WAAW,CAACiD,IAAb,CAHd;EAITC,GAAG,EAAER,iBAAiB,CAAC1C,WAAW,CAACmD,GAAb,CAJb;EAKTC,MAAM,EAAEV,iBAAiB,CAAC1C,WAAW,CAACqD,MAAb,CALhB;EAMTC,KAAK,EAAEZ,iBAAiB,CAAC1C,WAAW,CAACuD,KAAb,CANf;EAOTC,OAAO,EAAEd,iBAAiB,CAAC1C,WAAW,CAACyD,OAAb;AAPjB,CAAb;AAUA,SAASvD,WAAW,IAAIrC,CAAxB,EAA2BmC,WAAW,IAAI0D,CAA1C,EAA6CzD,WAAW,IAAIpB,CAA5D,EAA+De,aAAa,IAAInB,CAAhF,EAAmFkE,IAAI,IAAIgB,CAA3F"},"metadata":{},"sourceType":"module"}