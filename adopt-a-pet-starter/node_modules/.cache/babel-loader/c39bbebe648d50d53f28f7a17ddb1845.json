{"ast":null,"code":"import { j as jsonParse, e as json } from './fetch-deps.js';\n/**\r\n * Determines if the given value is an object.\r\n */\n\nfunction isObject(value) {\n  return value != null && typeof value === 'object' && !Array.isArray(value);\n}\n/**\r\n * Deeply merges two given objects with the right one\r\n * having a priority during property assignment.\r\n */\n\n\nfunction mergeRight(left, right) {\n  return Object.entries(right).reduce((result, _ref) => {\n    let [key, rightValue] = _ref;\n    const leftValue = result[key];\n\n    if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\n      result[key] = leftValue.concat(rightValue);\n      return result;\n    }\n\n    if (isObject(leftValue) && isObject(rightValue)) {\n      result[key] = mergeRight(leftValue, rightValue);\n      return result;\n    }\n\n    result[key] = rightValue;\n    return result;\n  }, Object.assign({}, left));\n}\n/**\r\n * Sets a given payload as a GraphQL response body.\r\n * @example\r\n * res(ctx.data({ user: { firstName: 'John' }}))\r\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\r\n */\n\n\nconst data = payload => {\n  return res => {\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      data: payload\n    });\n    return json(nextBody)(res);\n  };\n};\n/**\r\n * Sets a given list of GraphQL errors on the mocked response.\r\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\r\n * @see {@link https://mswjs.io/docs/api/context/errors}\r\n */\n\n\nconst errors = errorsList => {\n  return res => {\n    if (errorsList == null) {\n      return res;\n    }\n\n    const prevBody = jsonParse(res.body) || {};\n    const nextBody = mergeRight(prevBody, {\n      errors: errorsList\n    });\n    return json(nextBody)(res);\n  };\n};\n\nexport { data as d, errors as e, mergeRight as m };","map":{"version":3,"names":["j","jsonParse","e","json","isObject","value","Array","isArray","mergeRight","left","right","Object","entries","reduce","result","key","rightValue","leftValue","concat","assign","data","payload","res","prevBody","body","nextBody","errors","errorsList","d","m"],"sources":["C:/Users/andre/Desktop/Programming/projects/adoptapet/adopt-a-pet-starter/node_modules/msw/lib/esm/errors-deps.js"],"sourcesContent":["import { j as jsonParse, e as json } from './fetch-deps.js';\n\n/**\r\n * Determines if the given value is an object.\r\n */\r\nfunction isObject(value) {\r\n    return value != null && typeof value === 'object' && !Array.isArray(value);\r\n}\n\n/**\r\n * Deeply merges two given objects with the right one\r\n * having a priority during property assignment.\r\n */\r\nfunction mergeRight(left, right) {\r\n    return Object.entries(right).reduce((result, [key, rightValue]) => {\r\n        const leftValue = result[key];\r\n        if (Array.isArray(leftValue) && Array.isArray(rightValue)) {\r\n            result[key] = leftValue.concat(rightValue);\r\n            return result;\r\n        }\r\n        if (isObject(leftValue) && isObject(rightValue)) {\r\n            result[key] = mergeRight(leftValue, rightValue);\r\n            return result;\r\n        }\r\n        result[key] = rightValue;\r\n        return result;\r\n    }, Object.assign({}, left));\r\n}\n\n/**\r\n * Sets a given payload as a GraphQL response body.\r\n * @example\r\n * res(ctx.data({ user: { firstName: 'John' }}))\r\n * @see {@link https://mswjs.io/docs/api/context/data `ctx.data()`}\r\n */\r\nconst data = (payload) => {\r\n    return (res) => {\r\n        const prevBody = jsonParse(res.body) || {};\r\n        const nextBody = mergeRight(prevBody, { data: payload });\r\n        return json(nextBody)(res);\r\n    };\r\n};\n\n/**\r\n * Sets a given list of GraphQL errors on the mocked response.\r\n * @example res(ctx.errors([{ message: 'Unauthorized' }]))\r\n * @see {@link https://mswjs.io/docs/api/context/errors}\r\n */\r\nconst errors = (errorsList) => {\r\n    return (res) => {\r\n        if (errorsList == null) {\r\n            return res;\r\n        }\r\n        const prevBody = jsonParse(res.body) || {};\r\n        const nextBody = mergeRight(prevBody, { errors: errorsList });\r\n        return json(nextBody)(res);\r\n    };\r\n};\n\nexport { data as d, errors as e, mergeRight as m };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,SAAd,EAAyBC,CAAC,IAAIC,IAA9B,QAA0C,iBAA1C;AAEA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EACrB,OAAOA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAlC,IAA8C,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAtD;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiC;EAC7B,OAAOC,MAAM,CAACC,OAAP,CAAeF,KAAf,EAAsBG,MAAtB,CAA6B,CAACC,MAAD,WAA+B;IAAA,IAAtB,CAACC,GAAD,EAAMC,UAAN,CAAsB;IAC/D,MAAMC,SAAS,GAAGH,MAAM,CAACC,GAAD,CAAxB;;IACA,IAAIT,KAAK,CAACC,OAAN,CAAcU,SAAd,KAA4BX,KAAK,CAACC,OAAN,CAAcS,UAAd,CAAhC,EAA2D;MACvDF,MAAM,CAACC,GAAD,CAAN,GAAcE,SAAS,CAACC,MAAV,CAAiBF,UAAjB,CAAd;MACA,OAAOF,MAAP;IACH;;IACD,IAAIV,QAAQ,CAACa,SAAD,CAAR,IAAuBb,QAAQ,CAACY,UAAD,CAAnC,EAAiD;MAC7CF,MAAM,CAACC,GAAD,CAAN,GAAcP,UAAU,CAACS,SAAD,EAAYD,UAAZ,CAAxB;MACA,OAAOF,MAAP;IACH;;IACDA,MAAM,CAACC,GAAD,CAAN,GAAcC,UAAd;IACA,OAAOF,MAAP;EACH,CAZM,EAYJH,MAAM,CAACQ,MAAP,CAAc,EAAd,EAAkBV,IAAlB,CAZI,CAAP;AAaH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMW,IAAI,GAAIC,OAAD,IAAa;EACtB,OAAQC,GAAD,IAAS;IACZ,MAAMC,QAAQ,GAAGtB,SAAS,CAACqB,GAAG,CAACE,IAAL,CAAT,IAAuB,EAAxC;IACA,MAAMC,QAAQ,GAAGjB,UAAU,CAACe,QAAD,EAAW;MAAEH,IAAI,EAAEC;IAAR,CAAX,CAA3B;IACA,OAAOlB,IAAI,CAACsB,QAAD,CAAJ,CAAeH,GAAf,CAAP;EACH,CAJD;AAKH,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,MAAM,GAAIC,UAAD,IAAgB;EAC3B,OAAQL,GAAD,IAAS;IACZ,IAAIK,UAAU,IAAI,IAAlB,EAAwB;MACpB,OAAOL,GAAP;IACH;;IACD,MAAMC,QAAQ,GAAGtB,SAAS,CAACqB,GAAG,CAACE,IAAL,CAAT,IAAuB,EAAxC;IACA,MAAMC,QAAQ,GAAGjB,UAAU,CAACe,QAAD,EAAW;MAAEG,MAAM,EAAEC;IAAV,CAAX,CAA3B;IACA,OAAOxB,IAAI,CAACsB,QAAD,CAAJ,CAAeH,GAAf,CAAP;EACH,CAPD;AAQH,CATD;;AAWA,SAASF,IAAI,IAAIQ,CAAjB,EAAoBF,MAAM,IAAIxB,CAA9B,EAAiCM,UAAU,IAAIqB,CAA/C"},"metadata":{},"sourceType":"module"}